<?xml version="1.0" encoding="UTF-8"?>
<project xmlns:dita="http://dita-ot.sourceforge.net"
	xmlns:if="ant:if" 
	xmlns:unless="ant:unless" 
	name="oasis-common-build">
	
	<!-- Create a custom preprocess2 so that we can insert topic numbering.
		Matches preprocess2 except:
		* Call custom preprocess2.topics.oasis rather than preprocess2.topics
	    * Add the "add-identifiers" step to preprocess
	-->
	<target name="preprocess2.oasis"
		dita:extension="depends org.dita.dost.platform.InsertDependsAction"
		description="Preprocess"
		dita:depends="{depend.preprocess.pre},
		preprocess2.init,
		ditaval-merge,
		
		preprocess2.maps,
		preprocess2.topics.oasis,
		
		map-clean-map,
		clean-preprocess,
		copy-files2,
		add-identifiers,
		generate-rfc-list,
		{depend.preprocess.post}">
		<dirname property="_dita.map.output.dir" file="${dita.output.dir}/${user.input.file}" />
		<dirname property="_dita.map.temp.dir" file="${dita.temp.dir}/${user.input.file}" />
		<property name="uplevels" value=""/>
		<property name="dita.map.output.dir" location="${_dita.map.output.dir}/${uplevels}"/>
	</target>
	
	<!-- Create a custom preprocess2 so that we can add topic numbering around the
		"topic-move-meta-entries" target. Otherwise matches toolkit's 3.5 level preprocess2.topics -->
	<target name="preprocess2.topics.oasis"
		depends="topic-reader,
		topic-branch-filter,
		topic-keyref,
		topic-copy-to,
		topic-conrefpush,
		topic-conref,
		topic-profile,
		preprocess2.topic-fragment,
		topic-chunk,
		number-topics,
		topic-move-meta-entries,
		add-numbers-to-titles,
		topic-maplink,
		topic-topicpull"/>

    <!-- Add ID attribute to all block level elements -->
	<target name="add-identifiers">
		<pipeline message="Add IDs to blocks" taskname="add-identifiers">
			<xslt basedir="${dita.temp.dir}"
				style="${dita.plugin.org.oasis-open.dita.publishing.dir}/xsl/add-identifiers.xsl">
				<ditaFileset format="dita"/>
				<xmlcatalog refid="dita.catalog"/>
			</xslt>
		</pipeline>
	</target>

	<!-- If needed, collect tagged RFC statements into a list.
	Because preprocess can rename the conformance topic, we cannot rely on
	its file name. Should be able to identify it but for now just brute force
	process all files looking for the hook to turn into a list. 
	Need to set aggregate.rfc.topics to have this run. -->
	
	<target name="generate-rfc-list" depends="generate-rfc-list.init,
		generate-rfc-list.findlist,
		generate-rfc-list.collect,
		generate-rfc-list.create"/>
	
	<target name="generate-rfc-list.init" if="aggregate.rfc.topics">
		
		<condition property="skip.rfclist" value="true">
			<not>
				<isset property="aggregate.rfc.topics"/>
			</not>
		</condition>
		
		<property name="rfc.conformance.prefix" value=""/>
		<property name="tempfile.with.rfc.file" value="${dita.temp.dir}/rfcfile.txt"/>
		<makeurl property="store.dita.rfc.filename" file="${tempfile.with.rfc.file}" validate="no"/>
		<property name="rfclist.file" value="${dita.temp.dir}/rfclist.xml"/>
		<makeurl property="rfclist.file.url" file="${rfclist.file}" validate="no"/>
		
		<available file="${dita.temp.dir}/${user.input.file}" property="rfc.use.input.file.name"/>
		<local name="rfc.renamed.map"/>
		<loadfile property="rfc.renamed.map" srcfile="${dita.temp.dir}/${user.input.file.listfile}" unless:set="noMap">
			<filterchain>
				<headfilter lines="1"/>
			</filterchain>
		</loadfile>
		<condition property="rfc.input.map" value="${dita.temp.dir}/${user.input.file}">
			<isset property="rfc.use.input.file.name"/>
		</condition>
		<property name="rfc.input.map" value="${dita.temp.dir}/${rfc.renamed.map}"/>
	</target>
		
	<target name="generate-rfc-list.findlist" unless="skip.rfclist">
		<pipeline message="Find the RFC items to enable two way linking" taskname="locate-rfc-items">
			<xslt basedir="${dita.temp.dir}"
				style="${dita.plugin.org.oasis-open.dita.publishing.dir}/xsl/locate-rfc-items.xsl"
				filenameparameter="FILENAME"
				filedirparameter="FILEDIR">
				<ditaFileset format="dita" processingRole="normal"/>
				<param name="store.dita.rfc.filename" expression="${store.dita.rfc.filename}"/>
				<xmlcatalog refid="dita.catalog"/>
			</xslt>
		</pipeline>
		
		<available file="${tempfile.with.rfc.file}" property="found.rfclist.topic"/>
		
		<condition property="skip.rfclist" value="true">
			<not>
				<isset property="found.rfclist.topic"/>
			</not>
		</condition>
	</target>
		
	<target name="generate-rfc-list.collect" unless="skip.rfclist">
		<loadfile property="rfclist.dita.topic" srcfile="${tempfile.with.rfc.file}">
			<filterchain>
				<headfilter lines="1"/>
			</filterchain>
		</loadfile>
		<!--<echo> Aggregated RFC list goes in: ${rfclist.dita.topic}</echo>-->
		
		<!-- Process the map, which walks topics looking for RFC items. -->
		<pipeline message="Collect RFC statements" taskname="collect-rfclist">
			<xslt basedir="${dita.temp.dir}"
				style="${dita.plugin.org.oasis-open.dita.publishing.dir}/xsl/collect-rfclist.xsl"
				in="${rfc.input.map}"
				out="${rfclist.file}">
				<param name="rfc.conformance.prefix" expression="${rfc.conformance.prefix}"/>
				<xmlcatalog refid="dita.catalog"/>
			</xslt>
		</pipeline>
	</target>

	<target name="generate-rfc-list.create" unless="skip.rfclist">
		<!-- Process topics, looking for the one that needs the generated list.
		    TODO: because we are processing every topic, we should be able to
		    link from RFC items in topics back to this list, and even better,
		    copy the number back into the RFC item for display as the link. -->
		<pipeline message="Find the RFC data element and generate list" taskname="generate-rfclist">
			<xslt basedir="${dita.temp.dir}"
				style="${dita.plugin.org.oasis-open.dita.publishing.dir}/xsl/generate-rfclist.xsl"
				filenameparameter="FILENAME"
				filedirparameter="FILEDIR">
				<ditaFileset format="dita" processingRole="normal"/>
				<param name="rfclist.file" expression="${rfclist.file.url}"/>
				<param name="rfclist.dita.topic" expression="${rfclist.dita.topic}"/>
				<xmlcatalog refid="dita.catalog"/>
			</xslt>
		</pipeline>
	</target>
	
    <!-- Add a topic number to all topics that go in the TOC. -->
	<target name="number-topics">
		<pipeline message="Add numbers to topicrefs" taskname="number-topics">
			<xslt basedir="${dita.temp.dir}"
				style="${dita.plugin.org.oasis-open.dita.publishing.dir}/xsl/add-topic-numbers.xsl">
				<ditaFileset format="ditamap" input="true"/>
				<xmlcatalog refid="dita.catalog"/>
			</xslt>
		</pipeline>
	</target>
	
    <!-- Move generated topic numbers into the title. -->
	<target name="add-numbers-to-titles">
		<pipeline message="Add numbers to topicrefs" taskname="number-topics">
			<xslt basedir="${dita.temp.dir}"
				style="${dita.plugin.org.oasis-open.dita.publishing.dir}/xsl/prefix-titles-with-numbers.xsl">
				<ditaFileset format="ditamap" input="true"/>
				<ditaFileset format="dita" processingRole="normal"/>
				<xmlcatalog refid="dita.catalog"/>
			</xslt>
		</pipeline>
	</target>
	
	<!-- Set defaults if values have not been passed in -->
	<target name="oasis.specification.init">
		<tstamp>
			<format property="default-publish-date" pattern="d MMMM yyyy" locale="en"/>
		</tstamp>
		<tstamp>
			<format property="default-current-year" pattern="yyyy" locale="en"/>
		</tstamp>
		<property name="oasis.spec.descriptor" value="dita-v2-XX"/>
		<property name="oasis.track" value="Standards Track Work Product"/>
		<property name="oasis.copyright" value="Copyright Â© OASIS Open ${default-current-year}. All Rights Reserved."/>
		<property name="oasis.spec.date" value="${default-publish-date}"/>
		
		<!-- Set the topic that will get the conformance list -->
		<property name="aggregate.rfc.topics" value="true"/>
	</target>
	
	<!-- Build OASIS style HTML5 output -->
	<target
		depends="oasis.specification.init,
		dita2spec-html5.init,
		html5.init,
		build-init,
		preprocess2.oasis,
		override.html5.topic.init,
		html5.topic,
		oasis-html5-coverpage,
		html5.css,
		return-oasis-html5"
		name="dita2spec-html5" description="OASIS Specification HTML5 transform">
	</target>
	
	<target name="dita2spec-html5.init">
		<!-- Adding "oasislinks" as a link type ensures our custom
      next/previous links only end up affecting the OASIS html output.
      The maplink XSL is in there for other builds but does nothing. -->
		<property name="include.rellinks" value="friend next previous oasislinks"/>
		<property name="args.copycss" value="yes"/>
		<property name="args.cssroot"
			value="${dita.plugin.org.oasis-open.dita.publishing.dir}${file.separator}resources"/>
		<property name="args.css" value="oasis.css"/>
		<property name="args.outext" value=".html"/>
		<property name="args.xsl" 
			value="${dita.plugin.org.oasis-open.dita.publishing.dir}${file.separator}xslhtml5${file.separator}dita2oasis-html5_shell.xsl"/>
		
		<!-- Setup a temp "output" directory within temp processing directory, so we can zip output -->
		<property name="temp.output.dir.name" value="temp_outdir"/>
	</target>
	
	<!-- Need to set validate="no" on the html5.map.url property setting below.
		Done by default in 3.6, added this override for use with 3.5.3 -->
	<target name="override.html5.topic.init">
		<local name="html5.map"/>
		<loadfile property="html5.map" srcfile="${dita.temp.dir}/${user.input.file.listfile}" unless:set="noMap">
			<filterchain>
				<headfilter lines="1"/>
			</filterchain>
		</loadfile>
		<makeurl property="html5.map.url" file="${dita.temp.dir}/${html5.map}" validate="no" unless:set="noMap"/>
	</target>
	
	<target name="oasis-html5-coverpage">
		<pipeline message="Build OASIS HTML5 cover page" taskname="oasis-cover">
			<xslt basedir="${dita.temp.dir}"
				destdir="${dita.output.dir}"
				extension="${out.ext}"
				style="${dita.plugin.org.oasis-open.dita.publishing.dir}/xslhtml5/oasis_coverpage.xsl">
				<ditaFileset format="ditamap" input="true"/>
				<param name="OUTEXT" expression="${out.ext}" if:set="out.ext"/>
				<param name="version-id" expression="${args.oasis.bookmeta.version-id}"/>
				<param name="errata-num" expression="${args.oasis.bookmeta.errata-num}"/>
				<param name="stage-abbrev" expression="${args.oasis.bookmeta.stage-abbrev}"/>
				<param name="revision-num" expression="${args.oasis.bookmeta.revision-num}"/>
				<param name="part-number" expression="${args.oasis.bookmeta.part-number}"/>
				<param name="spec-release-type" expression="${args.oasis.bookmeta.spec-release-type}"/>
				<xmlcatalog refid="dita.catalog"/>
			</xslt>
		</pipeline>
	</target>
	
	<target name="return-oasis-html5">
		<property name="oasis-haml5-zipname" value="${dita.map.filename.root}.zip"/>
		<zip destfile="${output.dir}/${oasis-haml5-zipname}" basedir="${dita.output.dir}">
			<include name="**/*"/>
		</zip>
		
		<!-- Also return individual files -->
		<copy todir="${output.dir}">
			<fileset dir="${dita.output.dir}"/>
		</copy>
	</target>
	
	<!-- Generate an appendix topic with a summary of attributes,
	     based on the latest RNG files. -->
	<target name="dita2attribute-appendix-topic" depends="build-init">
		<pipeline message="Generate appendix topic" taskname="appendix-topic">
			<xslt style="${dita.plugin.org.oasis-open.dita.publishing.dir}/xsl/gather-attlists.xsl"
				in="${dita.plugin.org.oasis-open.dita.v2_0.dir}/rng/base/basetopic.rng"
				out="${output.dir}/generated-attlist.dita">
				<xmlcatalog refid="dita.catalog"/>
			</xslt>
		</pipeline>
	</target>
	
</project>